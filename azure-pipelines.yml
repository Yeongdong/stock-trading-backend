trigger:
  - main
  - develop

pr:
  - main
  - develop

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  dotnetSdkVersion: '8.0.x'
  solutionFile: '**/*.sln'
  apiProjectPath: '**/StockTrading.API.csproj'
  infrastructureProjectPath: '**/StockTrading.Infrastructure.csproj'
  testProjectPath: '**/StockTrading.Tests.csproj'
  
  ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/main') }}:
    deploymentEnvironment: 'Production'
    webAppName: 'stocktrading-api'
  ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/develop') }}:
    deploymentEnvironment: 'Development'
    webAppName: 'stocktrading-api-dev'

stages:
  - stage: Build
    displayName: 'Build & Test'
    jobs:
      - job: Build
        displayName: 'Build Application'
        steps:
          - task: UseDotNet@2
            displayName: 'Install .NET SDK'
            inputs:
              packageType: 'sdk'
              version: '$(dotnetSdkVersion)'

          # 캐시 비활성화 (문제 해결까지)
          # - task: Cache@2
          #   displayName: 'Cache NuGet packages'
          #   inputs:
          #     key: 'nuget | "$(Agent.OS)" | **/*.csproj'
          #     restoreKeys: |
          #       nuget | "$(Agent.OS)"
          #       nuget
          #     path: $(NUGET_PACKAGES)

          - script: |
              echo '{
                "Logging": {
                  "LogLevel": {
                    "Default": "Information",
                    "Microsoft.AspNetCore": "Warning",
                    "Microsoft.EntityFrameworkCore": "Warning"
                  }
                },
                "JwtSettings": {
                  "Key": "super_secure_test_key_that_is_at_least_32_bytes_long_for_testing_purposes_only",
                  "Issuer": "test_issuer",
                  "Audience": "test_audience",
                  "AccessTokenExpirationMinutes": 30,
                  "RefreshTokenExpirationDays": 7
                },
                "Authentication": {
                  "Google": {
                    "ClientId": "test_client_id_for_integration_tests",
                    "ClientSecret": "test_client_secret_for_integration_tests"
                  }
                },
                "ConnectionStrings": {
                  "DefaultConnection": "InMemory=true"
                },
                "KisApi": {
                  "BaseUrl": "https://openapi.koreainvestment.com:9443",
                  "MockMode": true
                }
              }' > StockTrading.Tests/appsettings.Testing.json
            displayName: 'Create Test Configuration'

          - task: DotNetCoreCLI@2
            displayName: 'Restore NuGet packages'
            inputs:
              command: 'restore'
              projects: '$(solutionFile)'
              feedsToUse: 'select'
              includeNuGetOrg: true

          - task: DotNetCoreCLI@2
            displayName: 'Build solution'
            inputs:
              command: 'build'
              projects: '$(solutionFile)'
              arguments: '--configuration $(buildConfiguration) --no-restore --verbosity minimal'

          - script: |
              find . -path "*/bin/$(buildConfiguration)/net8.0" -type d -exec cp StockTrading.Tests/appsettings.Testing.json {} \; 2>/dev/null || true
              
              echo "=== Test Configuration Files ==="
              find . -name "appsettings.Testing.json" -ls
              
              echo "=== Built Test Assemblies ==="
              find . -path "*/bin/$(buildConfiguration)/net8.0/StockTrading.Tests.*" -ls
            displayName: 'Copy test configuration and debug'

          - task: DotNetCoreCLI@2
            displayName: 'Run unit tests'
            inputs:
              command: 'test'
              projects: '$(testProjectPath)'
              arguments: '--configuration $(buildConfiguration) --no-build --verbosity detailed --logger:"console;verbosity=detailed"'
              testRunTitle: 'Unit Tests'

          - task: PublishTestResults@2
            displayName: 'Publish test results'
            condition: always()
            inputs:
              testResultsFormat: 'VSTest'
              testResultsFiles: '**/*.trx'
              testRunTitle: 'Unit Tests'

          - task: PublishCodeCoverageResults@2
            displayName: 'Publish code coverage'
            condition: always()
            inputs:
              summaryFileLocation: '**/coverage.cobertura.xml'
              codeCoverageTool: 'Cobertura'

          - task: DotNetCoreCLI@2
            displayName: 'Publish application'
            inputs:
              command: 'publish'
              projects: '$(apiProjectPath)'
              arguments: '--configuration $(buildConfiguration) --no-build --output $(Build.ArtifactStagingDirectory)/app'
              zipAfterPublish: true
              modifyOutputPath: false

          - task: PublishBuildArtifacts@1
            displayName: 'Publish build artifacts'
            inputs:
              pathtoPublish: '$(Build.ArtifactStagingDirectory)'
              artifactName: 'drop'
              publishLocation: 'Container'

  - stage: Deploy
    displayName: 'Deploy to $(deploymentEnvironment)'
    dependsOn: Build
    condition: and(succeeded(), in(variables['Build.SourceBranch'], 'refs/heads/main', 'refs/heads/develop'))
    variables:
      - group: stockTradingDb
      - ${{ if eq(variables.deploymentEnvironment, 'Production') }}:
          - group: stockTradingProd
      - ${{ if eq(variables.deploymentEnvironment, 'Development') }}:
          - group: stockTradingDev
    jobs:
      - deployment: DatabaseMigration
        displayName: 'Database Migration'
        environment: '$(deploymentEnvironment)-DB'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  persistCredentials: true

                - task: UseDotNet@2
                  displayName: 'Install .NET SDK'
                  inputs:
                    packageType: 'sdk'
                    version: '$(dotnetSdkVersion)'

                - task: DotNetCoreCLI@2
                  displayName: 'Install EF Core Tools'
                  inputs:
                    command: 'custom'
                    custom: 'tool'
                    arguments: 'install --global dotnet-ef --version 8.0.0'

                - task: DotNetCoreCLI@2
                  displayName: 'Restore packages'
                  inputs:
                    command: 'restore'
                    projects: 'StockTrading.Infrastructure/StockTrading.Infrastructure.csproj'

                - script: |
                    echo "Checking current database state..."
                    CONNECTION_STRING="Host=$(DB_HOST);Database=$(DB_NAME);Port=5432;User Id=$(DB_USER);Password=$(POSTGRES_PASSWORD);Ssl Mode=Require;Trust Server Certificate=true;"
                    
                    dotnet ef database update --dry-run --project StockTrading.Infrastructure/StockTrading.Infrastructure.csproj --startup-project StockTrading.API/StockTrading.API.csproj --verbose || echo "Database connection test completed"
                  displayName: 'Check database connectivity'
                  env:
                    ASPNETCORE_ENVIRONMENT: '$(deploymentEnvironment)'
                    ConnectionStrings__DefaultConnection: 'Host=$(DB_HOST);Database=$(DB_NAME);Port=5432;User Id=$(DB_USER);Password=$(POSTGRES_PASSWORD);Ssl Mode=Require;Trust Server Certificate=true;'

                - task: DotNetCoreCLI@2
                  displayName: 'Generate migration script'
                  inputs:
                    command: 'custom'
                    custom: 'ef'
                    arguments: 'migrations script --project StockTrading.Infrastructure/StockTrading.Infrastructure.csproj --startup-project StockTrading.API/StockTrading.API.csproj --output $(Build.ArtifactStagingDirectory)/migration-$(Build.BuildNumber).sql --idempotent'
                  env:
                    ASPNETCORE_ENVIRONMENT: '$(deploymentEnvironment)'
                    ConnectionStrings__DefaultConnection: 'Host=$(DB_HOST);Database=$(DB_NAME);Port=5432;User Id=$(DB_USER);Password=$(POSTGRES_PASSWORD);Ssl Mode=Require;Trust Server Certificate=true;'

                - task: DotNetCoreCLI@2
                  displayName: 'Execute database migration'
                  inputs:
                    command: 'custom'
                    custom: 'ef'
                    arguments: 'database update --project StockTrading.Infrastructure/StockTrading.Infrastructure.csproj --startup-project StockTrading.API/StockTrading.API.csproj --verbose'
                  env:
                    ASPNETCORE_ENVIRONMENT: '$(deploymentEnvironment)'
                    ConnectionStrings__DefaultConnection: 'Host=$(DB_HOST);Database=$(DB_NAME);Port=5432;User Id=$(DB_USER);Password=$(POSTGRES_PASSWORD);Ssl Mode=Require;Trust Server Certificate=true;'

                - script: |
                    echo "Verifying migration status..."
                    dotnet ef migrations list --project StockTrading.Infrastructure/StockTrading.Infrastructure.csproj --startup-project StockTrading.API/StockTrading.API.csproj --json > $(Build.ArtifactStagingDirectory)/migrations-status.json
                    
                    echo "Applied migrations:"
                    cat $(Build.ArtifactStagingDirectory)/migrations-status.json | jq -r '.[] | select(.applied == true) | .name'
                    
                    echo "Pending migrations:"
                    cat $(Build.ArtifactStagingDirectory)/migrations-status.json | jq -r '.[] | select(.applied == false) | .name' || echo "No pending migrations"
                  displayName: 'Verify migration status'
                  env:
                    ASPNETCORE_ENVIRONMENT: '$(deploymentEnvironment)'
                    ConnectionStrings__DefaultConnection: 'Host=$(DB_HOST);Database=$(DB_NAME);Port=5432;User Id=$(DB_USER);Password=$(POSTGRES_PASSWORD);Ssl Mode=Require;Trust Server Certificate=true;'

                - task: PublishBuildArtifacts@1
                  displayName: 'Publish migration artifacts'
                  condition: always()
                  inputs:
                    pathtoPublish: '$(Build.ArtifactStagingDirectory)'
                    artifactName: 'migration-$(deploymentEnvironment)-$(Build.BuildNumber)'

      - deployment: DeployWebApp
        displayName: 'Deploy Web Application'
        dependsOn: DatabaseMigration
        environment: '$(deploymentEnvironment)'
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: drop

                - task: AzureWebApp@1
                  displayName: 'Deploy to Azure Web App'
                  inputs:
                    azureSubscription: 'stocktrading'
                    appType: 'webApp'
                    appName: '$(webAppName)'
                    package: '$(Pipeline.Workspace)/drop/app/*.zip'
                    appSettings: |
                      -ASPNETCORE_ENVIRONMENT $(deploymentEnvironment)
                      -ConnectionStrings__DefaultConnection "Host=$(DB_HOST);Database=$(DB_NAME);Port=5432;User Id=$(DB_USER);Password=$(POSTGRES_PASSWORD);Ssl Mode=Require;Trust Server Certificate=true;"
                      -JwtSettings__Key "$(JWT_KEY)"
                      -JwtSettings__Issuer "$(JWT_ISSUER)"
                      -JwtSettings__Audience "$(JWT_AUDIENCE)"
                      -Authentication__Google__ClientId "$(GOOGLE_CLIENT_ID)"
                      -Authentication__Google__ClientSecret "$(GOOGLE_CLIENT_SECRET)"
                      -Authentication__Google__masterId "$(GOOGLE_MASTER_ID)"
                      -Encryption__Key "$(ENCRYPTION_KEY)"
                      -Encryption__IV "$(ENCRYPTION_IV)"
                      -KoreaInvestment__BaseUrl "https://openapi.koreainvestment.com:9443"
                      -Redis__ConnectionString "$(REDIS_CONNECTION_STRING)"
                      -Redis__InstanceName "$(REDIS_INSTANCE_NAME)"
                      -Redis__Enabled "true"
                      -Cache__Enabled "true"
                      -Cache__Provider "Redis"

                - script: |
                    echo "Waiting for application to start..."
                    sleep 45
                  displayName: 'Wait for application startup'

                - script: |
                    echo "Performing health check..."
                    
                    MAX_RETRIES=5
                    RETRY_COUNT=0
                    
                    while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
                      echo "Attempt $((RETRY_COUNT + 1))/$MAX_RETRIES"
                    
                      response=$(curl -s -o /dev/null -w "%{http_code}" https://$(webAppName).azurewebsites.net/health 2>/dev/null || echo "000")
                    
                      if [ "$response" = "200" ]; then
                        echo "Application is healthy (HTTP $response)"
                    
                        api_response=$(curl -s -o /dev/null -w "%{http_code}" https://$(webAppName).azurewebsites.net/api/health 2>/dev/null || echo "000")
                        echo "API endpoint status: HTTP $api_response"
                    
                        exit 0
                      else
                        echo "Health check failed with status: $response"
                        RETRY_COUNT=$((RETRY_COUNT + 1))
                    
                        if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                          echo "Retrying in 30 seconds..."
                          sleep 30
                        fi
                      fi
                    done
                    
                    echo "Application health check failed after $MAX_RETRIES attempts"
                    exit 1
                  displayName: 'Health check with retry'

                - script: |
                    echo "Deployment completed successfully!"
                    echo "Application URL: https://$(webAppName).azurewebsites.net"
                    echo "Health Check: https://$(webAppName).azurewebsites.net/health"
                    echo "Environment: $(deploymentEnvironment)"
                    echo "Build Number: $(Build.BuildNumber)"
                  displayName: 'Deployment summary'