trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  dotnetSdkVersion: '8.0.x'
  solutionFile: 'StockTrading.sln'
  apiProjectPath: 'StockTrading.API/StockTrading.API.csproj'

stages:
- stage: Build
  displayName: 'Build Stage'
  jobs:
  - job: Build
    steps:
    - task: UseDotNet@2
      displayName: 'Install .NET SDK'
      inputs:
        packageType: 'sdk'
        version: '$(dotnetSdkVersion)'
    
    # 테스트 설정 파일 생성 및 복사
    - script: |
        # 프로젝트 루트에 설정 파일 생성
        echo '{
          "Logging": {
            "LogLevel": {
              "Default": "Information",
              "Microsoft.AspNetCore": "Warning"
            }
          },
          "JwtSettings": {
            "Key": "super_secure_test_key_that_is_at_least_32_bytes_long_for_testing_purposes_only",
            "Issuer": "test_issuer",
            "Audience": "test_audience",
            "AccessTokenExpirationMinutes": 30,
            "RefreshTokenExpirationDays": 7
          },
          "Authentication": {
            "Google": {
              "ClientId": "test_client_id_for_integration_tests",
              "ClientSecret": "test_client_secret_for_integration_tests"
            }
          },
          "ConnectionStrings": {
            "DefaultConnection": "InMemory=true"
          }
        }' > StockTrading.Tests/appsettings.Testing.json
        
        # 디렉토리 구조 확인
        echo "Current directory structure:"
        find . -name "StockTrading.Tests" -type d
      displayName: 'Create Test Settings File'

    - task: DotNetCoreCLI@2
      displayName: 'Restore packages'
      inputs:
        command: 'restore'
        projects: '$(solutionFile)'
        feedsToUse: 'select'

    - task: DotNetCoreCLI@2
      displayName: 'Build solution'
      inputs:
        command: 'build'
        projects: '$(solutionFile)'
        arguments: '--configuration $(buildConfiguration) --no-restore'
    
    # 빌드 후 설정 파일 복사
    - script: |
        # 빌드 출력 디렉토리 구조 확인
        echo "Build output directory structure:"
        find $(Build.SourcesDirectory)/StockTrading.Tests/bin -type d
        
        # 테스트 파일 복사
        mkdir -p $(Build.SourcesDirectory)/StockTrading.Tests/bin/$(buildConfiguration)/net8.0
        cp StockTrading.Tests/appsettings.Testing.json $(Build.SourcesDirectory)/StockTrading.Tests/bin/$(buildConfiguration)/net8.0/
        
        # 복사된 파일 확인
        ls -la $(Build.SourcesDirectory)/StockTrading.Tests/bin/$(buildConfiguration)/net8.0/
      displayName: 'Copy settings to build output'

    - task: DotNetCoreCLI@2
      displayName: 'Run tests'
      inputs:
        command: 'test'
        projects: '**/*Tests/*.csproj'
        arguments: '--configuration $(buildConfiguration) --no-build'
        testRunTitle: 'Running tests'

    - task: DotNetCoreCLI@2
      displayName: 'Publish app'
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: '$(apiProjectPath)'
        arguments: '--configuration $(buildConfiguration) --no-build --output $(Build.ArtifactStagingDirectory)'
        zipAfterPublish: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish artifacts'
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: 'WebApp'

- stage: Deploy
  displayName: 'Deploy to Development'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeployWebApp
    displayName: 'Deploy Web App'
    environment: 'Development'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy to Azure Web App'
            inputs:
              azureSubscription: 'stocktrading'
              appType: 'webApp'
              appName: 'stocktrading-api'
              package: '$(Pipeline.Workspace)/WebApp/*.zip'