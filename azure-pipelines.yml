trigger:
  - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  dotnetSdkVersion: '8.0.x'
  solutionFile: '**/*.sln'
  apiProjectPath: '**/StockTrading.API.csproj'

stages:
  - stage: Build
    displayName: 'Build Stage'
    jobs:
      - job: Build
        steps:
          - task: UseDotNet@2
            displayName: 'Install .NET SDK'
            inputs:
              packageType: 'sdk'
              version: '$(dotnetSdkVersion)'

          - script: |
              echo '{
                "Logging": {
                  "LogLevel": {
                    "Default": "Information",
                    "Microsoft.AspNetCore": "Warning"
                  }
                },
                "JwtSettings": {
                  "Key": "super_secure_test_key_that_is_at_least_32_bytes_long_for_testing_purposes_only",
                  "Issuer": "test_issuer",
                  "Audience": "test_audience",
                  "AccessTokenExpirationMinutes": 30,
                  "RefreshTokenExpirationDays": 7
                },
                "Authentication": {
                  "Google": {
                    "ClientId": "test_client_id_for_integration_tests",
                    "ClientSecret": "test_client_secret_for_integration_tests"
                  }
                },
                "ConnectionStrings": {
                  "DefaultConnection": "InMemory=true"
                }
              }' > StockTrading.Tests/appsettings.Testing.json
            displayName: 'Create Test Settings File'

          - task: DotNetCoreCLI@2
            displayName: 'Restore packages'
            inputs:
              command: 'restore'
              projects: '$(solutionFile)'

          - task: DotNetCoreCLI@2
            displayName: 'Build solution'
            inputs:
              command: 'build'
              projects: '$(solutionFile)'
              arguments: '--configuration $(buildConfiguration) --no-restore'

          - script: |
              find . -path "*/bin/$(buildConfiguration)/net8.0" -type d -exec cp StockTrading.Tests/appsettings.Testing.json {} \;
            displayName: 'Copy test settings'

          - task: DotNetCoreCLI@2
            displayName: 'Run tests'
            inputs:
              command: 'test'
              projects: '**/*Tests/*.csproj'
              arguments: '--configuration $(buildConfiguration) --no-build'

          - task: DotNetCoreCLI@2
            displayName: 'Publish app'
            inputs:
              command: 'publish'
              projects: '$(apiProjectPath)'
              arguments: '--configuration $(buildConfiguration) --no-build --output $(Build.ArtifactStagingDirectory)'
              zipAfterPublish: true

          - task: PublishBuildArtifacts@1
            inputs:
              pathtoPublish: '$(Build.ArtifactStagingDirectory)'
              artifactName: 'WebApp'

  - stage: Deploy
    displayName: 'Deploy'
    dependsOn: Build
    variables:
      - group: stockTradingDb
    jobs:
      - deployment: DeployWebApp
        environment: 'Development'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self

                - task: UseDotNet@2
                  inputs:
                    packageType: 'sdk'
                    version: '8.0.x'

                - script: |
                    dotnet tool install --global dotnet-ef
                    dotnet restore

                    export ConnectionStrings__DefaultConnection="Host=stocktrading-postgres.postgres.database.azure.com;Database=postgres;Port=5432;User Id=stockadmin;Password=$(POSTGRES_PASSWORD);Ssl Mode=Require;"

                    # SQL 스크립트 생성
                    cat > fix_migration.sql << 'EOF'
                    INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion") 
                    VALUES ('20250629121402_SyncDatabaseState', '8.0.0') 
                    ON CONFLICT ("MigrationId") DO NOTHING;
                    
                    ALTER TABLE users ADD COLUMN IF NOT EXISTS previous_day_total_amount DECIMAL(18,2);
                    EOF

                    # C# 코드로 SQL 실행
                    cat > execute_sql.cs << 'EOF'
                    using Npgsql;
                    using System;
                    using System.IO;

                    var connectionString = Environment.GetEnvironmentVariable("ConnectionStrings__DefaultConnection");
                    var sql = File.ReadAllText("fix_migration.sql");

                    try {
                        using var connection = new NpgsqlConnection(connectionString);
                        connection.Open();
                        using var command = new NpgsqlCommand(sql, connection);
                        command.ExecuteNonQuery();
                        Console.WriteLine("SQL executed successfully");
                    }
                    catch (Exception ex) {
                        Console.WriteLine($"Error: {ex.Message}");
                    }
                    EOF

                    # C# 스크립트 실행
                    dotnet add package Npgsql
                    dotnet script execute_sql.cs

                    # 마이그레이션 실행
                    dotnet ef database update --project StockTrading.Infrastructure/StockTrading.Infrastructure.csproj --startup-project StockTrading.API/StockTrading.API.csproj
                  displayName: 'Database Migration'
                  env:
                    POSTGRES_PASSWORD: $(POSTGRES_PASSWORD)
                  continueOnError: true

                - task: AzureWebApp@1
                  displayName: 'Deploy to Azure'
                  inputs:
                    azureSubscription: 'stocktrading'
                    appType: 'webApp'
                    appName: 'stocktrading-api'
                    package: '$(Pipeline.Workspace)/WebApp/*.zip'