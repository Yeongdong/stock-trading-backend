name: SonarQube Analysis

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: stock_trading_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # SonarQube 분석을 위해 전체 히스토리 필요

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Setup Java (SonarQube Scanner 요구사항)
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install SonarQube Scanner
        run: dotnet tool install --global dotnet-sonarscanner

      - name: Restore dependencies
        run: dotnet restore
      
      # ⚠️ 설정 필요: GitHub Secrets에 SONAR_TOKEN 추가 필요
      - name: Begin SonarQube analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet sonarscanner begin \
            /k:"StockTrading-Backend" \
            /o:"your-organization" \
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml" \
            /d:sonar.exclusions="**/bin/**,**/obj/**,**/Migrations/**,**/*.Designer.cs" \
            /d:sonar.test.exclusions="**/*Test.cs,**/*Tests.cs"

      - name: Build project
        run: dotnet build --configuration Release --no-restore

      - name: Run tests with coverage
        run: |
          dotnet test StockTrading.Tests \
            --configuration Release \
            --no-build \
            --collect:"XPlat Code Coverage" \
            --results-directory:"./coverage" \
            --logger:"console;verbosity=minimal" \
            /p:CollectCoverage=true \
            /p:CoverletOutputFormat=opencover \
            /p:CoverletOutput="./coverage/" \
            /p:Exclude="[*.Tests]*,[*]*.Migrations.*"

      - name: End SonarQube analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
      
      # 선택사항: Codecov 연동
      - name: Upload coverage to Codecov (선택사항)
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/coverage.opencover.xml
          fail_ci_if_error: false
      
      # 선택사항: PR에 결과 코멘트
      - name: Comment PR with SonarQube results
        if: github.event_name == 'pull_request'
        uses: sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}